Goal:
Design a program that can generate a sudoku board with some pre-filled entries and show the steps to solving the generated board.


Sudoku class requirements:

Initialize Board: create a sudoku board with no entries
	Board will be 9x9 and may be subdivided into 9 3x3 sectors

-----------------------------------------------
Prefill board: inject each sector with some values the comply to sudoku rules

-----------------------------------------
Print Board: Display board and its entries.

------------------------------------------


[Sudoku Solver >> inherits >> Sudoku class]

Solver requirements:

------------------------------------------

Solve: a recursive or iterative (indefinite) function that calls the following solving operations until n items have been added to the board (board is full).    

insert entry: insert an entry that complies with rules (stack memory)

remove entry: remove a previously inserted entry (stack memory)

show step: print dialogue explaining move followed by calling the print board function accessed in parent.


August 10 - Generation Algorithm - Decision Problem

- Choose a random unoccupied cell on the sudoku grid.
- write a random single digit (1-9) entry to the chosen spot.
- Do validation check; does the board break the rules (repeating digit(s) in row, col, subset).
- If the board breaks the rules, remove the entry, then try a different number (not yet chosen in this loop) at the same spot.
- If the board does not break rules. Repeat the algorithm until n spots are occupied.

August 14 - Sector association

An array called referencePoints will be created on borard creation. It contains a list of structures that contain two attributes. A row attribute and a column attribute.
each index represents the sector number - 1.

referencePoints = [row = 1; col = 1], [row = 1; col = 4], [row = 1; col = 7], 
		  [row = 4; col = 1], [row = 4; col = 4], [row = 4; col = 7],
		  [row = 7; col = 1], [row = 7; col = 4], [row = 7; col = 7]

Approaches to determine the sector of any chosen index for an entry:
(1)Could number the board during initialization and create an assignment using the cell numbers.
(2)Could do a neighbor search to find the entry's subsection center.

In approach 1, tagging every cell with numbers would require a condition that checks the cell number against a list to determine its assigned sector. Although this would only need to happen once for each cell (81 in all) it would requre more computation time. 

In approach 2 there is no need to determine the sector. The program will check the neighbors and compare each against the list of reference points. Since every entry can only have 1 valid neighbor that is a 'center point' this is a valid approach.

I will be using approach 2. 


Board Validation...

There will be two types of validation to occur on every entry.

-- subset validation
Checks to see if the current entry already exists in that sector.

Approach: 
Have indexes of the central cells of every sector commited to memory.
e.g. if sector 1, start at [1,1]. Then check all neighbors (including self when applicable).

Visual example. Made an entry within sector X. Sector X's central cell is located at [j,k] accourding to the array of central cells.

Then just need to check cells (ignore current index when entry of current iteration was made). 
[j-1,k-1], [j-1, k], [j-1, k+1]
[j,k-1],   [j,k]   , [j, k+1]
[j+1, k-1], [j+1, k], [j+1, k+1]

Would it be quicker and simpler to keep a list of added numbers for a given sector? It would update per entry. The program will only need to check for occurence in the list (linear search).
Above approach requires anywhere from 0 to 9 searches. List approach would be anywhere from 0 to 9 searches. Entirely depends on the entries. 

Currently I do not see a computation time advantage. The former approach has a memory advantage however, so I will be implementing that.   


-- cross validation
Checks to see if the current entry already exists in the column/row it was placed in.

Approach:
given index [j][k]
check all values from [j][0] to [j][9]. This is all entries in the same row.
check all values from [0][k] to [9][k]. This is all entries in the same col.

It's a straightorward linear search.


August 15

List of reference points created.
Next goal is to implement validation algorithms, test them, implement back tracking algorithm, test it. Integrate with validation algorithms. 

validate will need to take in a reference point.

Create a function called get reference would make sense.

Update to finding the center point of secotor. Each cell will require a unique identifier (will just number them in order left to right, row by row up to 81). The when the neighbor search occurs, we will select the neighbor with a matching identifier in the list.

Previorsly the approach had no way of identifying cells except for by row and column. This will reduce the number of checks needed.


Current task:
Tracing then unit testing for subset and cross validation...
Once done, push to github.

August 16

Encountered an error while working on subset validation.
The box search uses a given coordinate and visits all matrix cells from row-1,col-1 to row+1, col+1.
One test case involved validating an entry that was made at the edge of the board [0,0].
This caused a segmentation/memory access error.

Task: devise a way to check if the 'box' is partially out of bounds and integrate it into the algorthm for box searching. (completed)

Task: test cross validation (completed)

Task: test an 'entry' and run validate that calls both validation functions and determines overal validity. Both must return true for current entry to be valid(true). (complete)

Task: Work on generation implementation using algorithm above.


August 17 - Backtracking algorithm


Recap:

- Choose a random unoccupied cell on the sudoku grid.
- write a random single digit (1-9) entry to the chosen spot.
- Do validation check; does the board break the rules (repeating digit(s) in row, col, subset).
- If the board breaks the rules, remove the entry, then try a different number (not yet chosen in this loop) at the same spot.
- If the board does not break rules (passes validation). Repeat the algorithm until n spots are occupied.


Task: play with C++ random library. Want a random algorithm that is truly random. (complete)

(1.) With random number generator. determine a cell from 1 to 81 (inclusive) for insertion.

(2.) get coordinates of cell.

(3.) from an array {1,2,3,4,5,6,7,8,9}, go in order--choosing a number then calling validate with the entry and the coordinates.

(4.) if a false value is returned, go to the next number. If a true value is returned, write that number into the cell.

(5.) Loop.


Update: generate function is arbitrarily inserting valid entries. However it seems that the back tracking algorithm is complete.

Ran the function at 10, 20, 50, and 80 iters in driver code to simulate parent loop to be added in generate.
Helped find and debug issue where subset validation did not check the last row of the box-search(small syntax issue).

Attempted to loop until 81 cells were filled.
Program ran into an indefinite loop when an unsolvable board was encountered.

Task: modify algorithm to remove entries when board is unsolvable. Must first determine when a board is unsolvable.

August 20

Idea: save the state of the board into a list and return to an earlier state when an unsolvable board is encountered.

Questions: 

- How will the program know the board is unsolvable?
- Which state should the program return to (how far back?)
	- delete all states saved after that state when loaded?
- What is the process of loading and unloading a state?
	- saved state is just an array of 81 integers.
	- every permutation, loop the matrix and and save the entries into a new array pushed back into a vector
	- when loading just write every value from the array into the matrix in order. (if 0, mark unoccupied.)

August 21

Answers:
Hint that the board is unsolvable:
	- tried all possible entries in a cell but couldn't add anything. Unsolvable solution encountered.

What state to return to?
	- this one is tricky
	- on one hand you could return to the first state each time.
	- on the other, you could return to an arbitrary state but this could cause complications.
	- test with restarting the board each time first


August 22

Want to se how long the program would need to run to return a solution with current approach.
Will run for 10 min then 30 min.

Before testing, modify the condition to return to initial state.
	- Print the unsolvable board to an output file with inserted items count before calling destroy and initialize.


August 23

We generated a valid sudoku board!!!


Why my approach is not efficient:
There is not enough 'direction' for my insertion algorithm.
I want to be on a path toward a solution. My current approach does not support this.

What to do:
Make a sudoku solver first.

How:
initialize a board that is valid and complete.
Remove random cells (like 29 to 50).
Insert a value at an empty cell. 
	if the board is still valid, continue to the next cell
	if not, remove the last cell and try another cell.

How does this help make a sudoku generatior?
The way we want to generate a board from an empty state is to attempt to solve the board after each entry (see if 1 or more solutions exist).
if the board is unsolvable after an entry (no solutions exist), we know we need to remove a value and try another random cell.




